// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/types/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PiAgentController_ConfigureStream_FullMethodName = "/homeserver.proto.PiAgentController/configureStream"
)

// PiAgentControllerClient is the client API for PiAgentController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Service API definition
type PiAgentControllerClient interface {
	ConfigureStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*OperationResponse, error)
}

type piAgentControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPiAgentControllerClient(cc grpc.ClientConnInterface) PiAgentControllerClient {
	return &piAgentControllerClient{cc}
}

func (c *piAgentControllerClient) ConfigureStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, PiAgentController_ConfigureStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PiAgentControllerServer is the server API for PiAgentController service.
// All implementations must embed UnimplementedPiAgentControllerServer
// for forward compatibility.
//
// *
// Service API definition
type PiAgentControllerServer interface {
	ConfigureStream(context.Context, *StreamRequest) (*OperationResponse, error)
	mustEmbedUnimplementedPiAgentControllerServer()
}

// UnimplementedPiAgentControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPiAgentControllerServer struct{}

func (UnimplementedPiAgentControllerServer) ConfigureStream(context.Context, *StreamRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureStream not implemented")
}
func (UnimplementedPiAgentControllerServer) mustEmbedUnimplementedPiAgentControllerServer() {}
func (UnimplementedPiAgentControllerServer) testEmbeddedByValue()                           {}

// UnsafePiAgentControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PiAgentControllerServer will
// result in compilation errors.
type UnsafePiAgentControllerServer interface {
	mustEmbedUnimplementedPiAgentControllerServer()
}

func RegisterPiAgentControllerServer(s grpc.ServiceRegistrar, srv PiAgentControllerServer) {
	// If the following call pancis, it indicates UnimplementedPiAgentControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PiAgentController_ServiceDesc, srv)
}

func _PiAgentController_ConfigureStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiAgentControllerServer).ConfigureStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiAgentController_ConfigureStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiAgentControllerServer).ConfigureStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PiAgentController_ServiceDesc is the grpc.ServiceDesc for PiAgentController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PiAgentController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homeserver.proto.PiAgentController",
	HandlerType: (*PiAgentControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "configureStream",
			Handler:    _PiAgentController_ConfigureStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/types/api.proto",
}
